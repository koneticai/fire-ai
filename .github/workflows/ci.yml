name: CI Pipeline

on:
  push:
    branches:
      - main
      - 'enhancement/**'
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"
  WORKDIR_PY: services/api
  PYTHONPATH: "${{ github.workspace }}/services/api/src:${{ github.workspace }}/services/api"

jobs:
  lint-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR_PY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('services/api/poetry.lock') }}

      - name: Install dependencies
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
        run: poetry install --no-interaction --no-ansi

      - name: Lint (pylint non-blocking)
        continue-on-error: true
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: poetry run pylint --exit-zero src/app

  test-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR_PY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('services/api/poetry.lock') }}

      - name: Install dependencies
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
        run: poetry install --no-interaction --no-ansi

      - name: Run tests
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          AWS_EC2_METADATA_DISABLED: "true"
        run: |
          poetry run pytest tests/ -v \
            --ignore=tests/performance \
            --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./services/api/coverage.xml
          flags: python
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR_PY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Install Safety
        run: pip install safety

      - name: Export requirements
        run: |
          poetry export --format=requirements.txt --output=requirements.txt --without-hashes || \
          poetry export -f requirements.txt -o requirements.txt --without-hashes || \
          echo "fastapi" > requirements.txt
        continue-on-error: true

      - name: Safety check (non-blocking)
        run: safety check -r requirements.txt --full-report || true
        continue-on-error: true

  build-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect Go service path
        id: gosvc
        run: |
          if [ -d "services/api/src/go_service" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "path=services/api/src/go_service" >> "$GITHUB_OUTPUT"
          elif [ -d "src/go_service" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "path=src/go_service" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "path=" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Go
        if: steps.gosvc.outputs.exists == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Build Go service
        if: steps.gosvc.outputs.exists == 'true'
        working-directory: ${{ steps.gosvc.outputs.path }}
        run: go build -v ./...

      - name: Test Go service
        if: steps.gosvc.outputs.exists == 'true'
        working-directory: ${{ steps.gosvc.outputs.path }}
        run: go test -v ./...

      - name: Skip Go build (not present)
        if: steps.gosvc.outputs.exists == 'false'
        run: echo "ℹ️  No Go service found; skipping build/test."
