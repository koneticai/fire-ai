CRITICAL FIX: Generate a NEW unique JWT_SECRET_KEY for this project.

CONTEXT:
The current JWT_SECRET_KEY may have been copied from another project,
causing cross-project token validation issues. We need a fresh secret.

STEP 1: Generate New JWT Secret
Create file: scripts/generate_new_jwt_secret.sh

#!/bin/bash
# Generate a cryptographically secure random secret
NEW_SECRET=$(openssl rand -hex 32)
echo "New JWT_SECRET_KEY:"
echo "$NEW_SECRET"
echo ""
echo "COPY THIS VALUE TO REPLIT SECRETS:"
echo "1. Click 'Tools' ‚Üí 'Secrets' in left sidebar"
echo "2. Find JWT_SECRET_KEY"
echo "3. Replace value with: $NEW_SECRET"
echo "4. Save and restart server"

Make executable: chmod +x scripts/generate_new_jwt_secret.sh
Run it: ./scripts/generate_new_jwt_secret.sh

STEP 2: Update Replit Secrets
1. Copy the new secret from script output
2. Go to Replit: Tools ‚Üí Secrets
3. Edit JWT_SECRET_KEY
4. Paste new value
5. Click "Save"

STEP 3: Restart Server Completely
Kill all Python processes and restart:

pkill -f uvicorn
pkill -f python
sleep 2
# Server will auto-restart via .replit config

STEP 4: Verify New Secret is Loaded
Add temporary debug endpoint to confirm:

# In src/app/routers/auth.py, add:
@router.get("/debug/config")
async def debug_config():
    from src.app.config import settings
    return {
        "jwt_secret_loaded": bool(settings.jwt_secret_key),
        "jwt_secret_length": len(settings.jwt_secret_key),
        "jwt_secret_prefix": settings.jwt_secret_key[:8] + "...",
        "algorithm": settings.algorithm
    }

Test: curl https://f4ef6f0f-0f5d-47c0-8400-3ec5dd3e1ea5-00-1947ayqzkyfgn.picard.replit.dev:5000/v1/auth/debug/config

Expected: Different prefix than before

STEP 5: Generate Fresh Demo Token
Now that we have a unique secret:

export JWT_SECRET_KEY="<new-secret-from-step-1>"
python services/api/scripts/generate_demo_token.py

Save the new token.

STEP 6: Test Authentication Again
export JWT_TOKEN="<new-token-from-step-5>"
curl -s "https://f4ef6f0f-0f5d-47c0-8400-3ec5dd3e1ea5-00-1947ayqzkyfgn.picard.replit.dev:5000/v1/buildings/" \
  -H "Authorization: Bearer $JWT_TOKEN" | python -m json.tool

EXPECTED: 200 OK with buildings list

VERIFICATION CHECKLIST:
- [ ] New JWT_SECRET_KEY generated (64 hex chars)
- [ ] Replit Secret updated
- [ ] Server restarted (all processes killed)
- [ ] Debug endpoint shows new secret prefix
- [ ] Fresh token generated with new secret
- [ ] /v1/buildings returns 200 OK (not 401)

TIME ESTIMATE: 15 minutes

SECURITY NOTE:
This ensures tokens from other projects can't be used here.
Each Replit project MUST have a unique JWT_SECRET_KEY.

Execute all 6 steps and report results.
```

---

## üîç **Why This Matters**

### **If JWT_SECRET_KEY was reused:**

**Old Setup (Wrong):**
```
Project A: JWT_SECRET_KEY = "abc123..."
Project B: JWT_SECRET_KEY = "abc123..." (SAME - BAD!)

Token from Project A ‚Üí Validates in Project B ‚ùå
But user_id from Project A doesn't exist in Project B's DB ‚ùå
Result: "Invalid token" ‚ùå
```

**New Setup (Correct):**
```
Project A: JWT_SECRET_KEY = "abc123..."
Project B: JWT_SECRET_KEY = "xyz789..." (UNIQUE - GOOD!)

Token from Project A ‚Üí Fails signature check in Project B ‚úÖ
Only tokens from Project B work in Project B ‚úÖ
Result: Proper isolation ‚úÖ